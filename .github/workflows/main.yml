name: Build Test & Deploy main
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.build-version.outputs.current }}
      npm-cache-dir: ${{ steps.npm-cache-dir.outputs.dir }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Get current build version
        id: build-version
        shell: bash
        run: echo "current=$(cat versoin || echo '0.0')" >> ${GITHUB_OUTPUT}
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - name: Cache Project dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Build project
        run: npm run build
      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: build-dev-${{ steps.build-version.outputs.current }}
          path: dist

  smoke-test:
    needs: build
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - shell: bash
        run: echo "Smoke tests passes"

  unit-test:
    needs: [build, smoke-test]
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Cache Project dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ${{ needs.build.outputs.npm-cache-dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Download currnet build
        uses: actions/download-artifact@v5
        with:
          name: build-dev-${{ needs.build.outputs.build-version }}
          path: dist/
      - name: Run Unit tests
        run: npm run test

  e2e-test:
    needs: [build, unit-test]
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Cache Project dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ${{ needs.build.outputs.npm-cache-dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Cache Playwright dependencies
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - if: ${{ steps.cache-playwright.outputs.cache-hit != 'true' }}
        name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium
      - name: Download currnet build
        uses: actions/download-artifact@v5
        with:
          name: build-dev-${{ needs.build.outputs.build-version }}
          path: dist/
      - name: Run Playwright tests
        env:
          PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS: 1
        run: npx playwright test --project chromium

  upload-pages-build:
    needs: [build, unit-test]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Cache Project dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ${{ needs.build.outputs.npm-cache-dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Build project
        env:
          NODE_ENV: gh-preview
        run: npm run build
      - name: Upload pages build
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

  deploy:
    needs: upload-pages-build
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
